#pragma kernel CSMain

struct ChannelData
{
    int mask;
    int width;
    int height;
    int samplingType;
    int invertValue;
    float scaler;
    float min;
    float max;
    float defaultValue;
};

StructuredBuffer<ChannelData> channelDataBuffer : register(t0);
Texture2D inputR : register(t1);
Texture2D inputG : register(t2);
Texture2D inputB : register(t3);
Texture2D inputA : register(t4);

RWTexture2D<float4> result;

float ResolveChannel(uint index, uint2 id)
{   
    ChannelData channelData = channelDataBuffer[index];

    // ReSharper disable once CppDefaultCaseNotHandledInSwitchStatement
    switch(channelData.samplingType)
    {
        case 1:
            id = uint2(id.x % channelData.width, id.y % channelData.height);
            break;
    }
    
    float4 pixel;
    switch(index)
    {
        default:
        case 0:
            pixel = inputR[id.xy];
            break;
        case 1:
            pixel = inputG[id.xy];
            break;
        case 2:
            pixel = inputB[id.xy];
            break;
        case 3:
            pixel = inputA[id.xy];
            break;
    }

    int defaultMask = !(channelData.mask << 1) & 1;
    int invertedDefaultMask = 1 - defaultMask;
    float result = defaultMask * channelData.defaultValue
    + (
        (channelData.mask >> 1 & 1) * pixel.r
        + (channelData.mask >> 2 & 1) * pixel.g
        + (channelData.mask >> 3 & 1) * pixel.b
        + (channelData.mask >> 4 & 1) * pixel.a
    ) * invertedDefaultMask;

    result = lerp(result, 1 - result, channelData.invertValue);
    result = lerp(result, result * channelData.scaler, invertedDefaultMask);
    result = lerp(result, clamp(result, channelData.min, channelData.max), invertedDefaultMask);
    return result;
}

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    result[id.xy] = float4
    (
        ResolveChannel(0, id.xy),
        ResolveChannel(1, id.xy),
        ResolveChannel(2, id.xy),
        ResolveChannel(3, id.xy)
    );
}
