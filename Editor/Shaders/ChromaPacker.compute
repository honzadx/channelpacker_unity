#pragma kernel CSRenderMain
#pragma kernel CSRenderPreview

#include "Includes/MaskPacking.hlsl"

struct ChannelData
{
    int2 size;
    int2 offset;
    float2 clamp;
    float2 clip;
    int mask;
    int samplingType;
    int invert;
    float scaler;
    float defaultValue;
};

// I: CSRenderMain
StructuredBuffer<ChannelData> channelDataBuffer;
Texture2D inputR : register(t0);
Texture2D inputG : register(t1);
Texture2D inputB : register(t2);
Texture2D inputA : register(t3);

// O: CSRenderMain, I: CSRenderPreview
RWTexture2D<float4> mainTexture; 

// I: CSRenderPreview
int previewMask;

// O: CSRenderPreview
RWTexture2D<float4> previewTexture;

inline float ResolveChannel(uint index, uint2 id)
{   
    ChannelData channelData = channelDataBuffer[index];

    id -= channelData.offset;
    id = lerp(id, id % channelData.size , channelData.samplingType);

    int4 unpackedMask = UnpackMask(channelData.mask);

    float4 pixel;
    switch(index)
    {
        default: case 0: pixel = inputR[id.xy]; break;
        case 1: pixel = inputG[id.xy]; break;
        case 2: pixel = inputB[id.xy]; break;
        case 3: pixel = inputA[id.xy]; break;
    }

    float textureValue = unpackedMask.r * pixel.r
                       + unpackedMask.g * pixel.g
                       + unpackedMask.b * pixel.b
                       + unpackedMask.a * pixel.a;
    
    int defaultMask = !(channelData.mask << 1) & 1;
    int textureMask = 1 - defaultMask;
    float result = lerp(channelData.defaultValue, textureValue, textureMask);
    result = lerp(result, 1 - result, channelData.invert);
    result = lerp(result, result * channelData.scaler, textureMask);
    float aboveMin = min(step(channelData.clip.x, result), 1);
    float belowMax = min(step(result, channelData.clip.y), 1);
    result = lerp(result, result * belowMax * aboveMin + (1 - belowMax) * 1, textureMask);
    result = lerp(result, clamp(result, channelData.clamp.x, channelData.clamp.y), textureMask);
    return result;
}
 
[numthreads(32,32,1)]
void CSRenderMain (uint3 id : SV_DispatchThreadID)
{
    mainTexture[id.xy] = float4
    (
        ResolveChannel(0, id.xy),
        ResolveChannel(1, id.xy),
        ResolveChannel(2, id.xy),
        ResolveChannel(3, id.xy)
    );
}

[numthreads(32,32,1)]
void CSRenderPreview (uint3 id : SV_DispatchThreadID)
{
    int4 unpackedMask = UnpackMask(previewMask);
    int t = saturate(unpackedMask.x + unpackedMask.y + unpackedMask.z + unpackedMask.w - 1);
    float4 pixel = mainTexture[id.xy];
    float4 oneChannel = (unpackedMask.r == 1) * float4(pixel.rrr, 1)
                      + (unpackedMask.g == 1) * float4(pixel.ggg, 1)
                      + (unpackedMask.b == 1) * float4(pixel.bbb, 1)
                      + (unpackedMask.a == 1) * float4(pixel.aaa, 1);
    float4 multiChannel = pixel * unpackedMask;
    multiChannel.a = lerp(1 , pixel.a, unpackedMask.w);
    previewTexture[id.xy] = lerp(oneChannel, multiChannel, t);
}